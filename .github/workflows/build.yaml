name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: Version
      env:
        description: Environment
        type: environment
        required: true
        default: "Production"

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Windows Build
            os: windows-latest
            architecture: x64
            artifact: windows
            artifact_suffix: ""
            upload_path_suffix: "/*"
          - name: MacOS Build x64
            os: macos-latest
            architecture: x64
            artifact: macos
            artifact_suffix: _intel
            upload_path_suffix: ".zip"
          - name: MacOS Build arm64
            os: macos-latest
            architecture: arm64
            artifact: macos
            artifact_suffix: _apple_silicon
            upload_path_suffix: ".zip"
          - name: Linux Build
            os: ubuntu-latest
            architecture: x64
            artifact: linux
            artifact_suffix: ""
            upload_path_suffix: "/*"

    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.env || 'Development' }}

    defaults:
      run:
        shell: bash

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MACOSX_DEPLOYMENT_TARGET: 10.15

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        id: setup-py
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          check-latest: true
          architecture: ${{ matrix.architecture }}
          cache: "pip" # Cache all pip dependency downloads
      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ steps.setup-py.outputs.python-version }}-${{ hashFiles('**/req*.txt') }}
      - name: Create venv
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv
      - name: Activate venv
        run: |
          source ./.venv/bin/activate || source ./.venv/Scripts/activate
          echo $PATH >> $GITHUB_PATH
      - name: Install venv dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Install any missing Qt dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev
          sudo apt-get install -y libxcb-cursor0
      - name: Build Python App
        run: python -m PyInstaller --log-level=WARN sshdrando.spec
      - name: Bundle Python App
        run: python build.py
      - name: Read Version
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml
        with:
          file: "constants/randoconstants.py"
          field: "VERSION"
      - name: Tar Files if not Windows Build
        if: runner.os != 'Windows'
        run: tar -C dist/release_archive_${{ steps.read_toml.outputs.value }}_${{ matrix.artifact }}/ -cvf "Skyward Sword HD Randomizer v${{ steps.read_toml.outputs.value }} (${{ matrix.artifact }}).tar" .
      - name: Upload Artifact non-Windows Artifact
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Skyward Sword HD Randomizer v${{ steps.read_toml.outputs.value }} (${{ matrix.artifact }}${{ matrix.artifact_suffix }})
          path: Skyward Sword HD Randomizer v${{ steps.read_toml.outputs.value }} (${{ matrix.artifact }}${{ matrix.artifact_suffix }}).tar
      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Skyward Sword HD Randomizer v${{ steps.read_toml.outputs.value }} (${{ matrix.artifact }})
          path: dist/release_archive_${{ steps.read_toml.outputs.value }}_${{ matrix.artifact }}
