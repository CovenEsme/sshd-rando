#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::actor;
use crate::debug;

use core::arch::asm;
use core::ffi::{c_char, c_void};
use cstr::cstr;
use static_assertions::assert_eq_size;

// repr(C) prevents rust from reordering struct fields.
// packed(1) prevents rust from aligning structs to the size of the largest
// field.

// Using u64 or 64bit pointers forces structs to be 8-byte aligned.
// The vanilla code seems to be 4-byte aligned. To make extra sure, used
// packed(1) to force the alignment to match what you define.

// Always add an assert_eq_size!() macro after defining a struct to ensure it's
// the size you expect it to be.

// Player stuff
#[repr(u32)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum PLAYER_ACTIONS {
    IDLE                        = 0x0,
    NO_STAMINA                  = 0x1,
    IDLE_STRETCH_ANIM           = 0x2,
    WALKING_RUNNING             = 0x3,
    TARGET_MOVE                 = 0x4,
    TARGETED                    = 0x5,
    LOCKED_TARGET_MOVE          = 0x6,
    TURN_AROUND_OR_SPAWN        = 0x7,
    SUDDEN_TURN                 = 0x8,
    SLIDING                     = 0x9,
    SLIDE_END                   = 0xA,
    STEP_UP                     = 0xB,
    ROLL                        = 0xC,
    BONK                        = 0xD,
    HOP                         = 0xE,
    HOP_LAND                    = 0xF,
    SMALL_JUMP                  = 0x10,
    UNK_11                      = 0x11,
    DIVE_SKY                    = 0x12,
    FREE_FALL                   = 0x13,
    FALLING                     = 0x14,
    LAND                        = 0x15,
    READJUST_BETWEEN_ACTION     = 0x16,
    GRAB_LEDGE_FROM_FALL        = 0x17,
    DROP_ONTO_LEDGE             = 0x18,
    HANGING_ON_LEDGE            = 0x19,
    MOVE_ON_LEDGE               = 0x1A,
    CLIMB_ONTO_LEDGE            = 0x1B,
    GRAB_ONTO_LEDGE             = 0x1C,
    START_CLIMB                 = 0x1D,
    RUN_UP_WALL                 = 0x1E,
    START_LEAP_LEDGE            = 0x1F,
    LEAP_LEDGE                  = 0x20,
    GRAB_VINES                  = 0x21,
    DROP_ONTO_VINES             = 0x22,
    MOVE_ON_VINES               = 0x23,
    IDLE_ON_VINES               = 0x24,
    UNK_25                      = 0x25,
    VINES_USING_CLAWS           = 0x26,
    START_VINES_LEAP            = 0x27,
    VINES_LEAP                  = 0x28,
    START_CLIMB_LADDER          = 0x29,
    GET_OFF_LADDER_TOP          = 0x2A,
    GET_ON_LADDER_TOP           = 0x2B,
    GET_OFF_LADDER              = 0x2C,
    CLIMB_LADDER                = 0x2D,
    START_LEAP_LADDER           = 0x2E,
    LEAP_LADDER                 = 0x2F,
    SPIN_ATTACK                 = 0x30,
    JUMP_SLASH                  = 0x31,
    LAND_JUMP_SLASH             = 0x32,
    SWORD_BOUNCE                = 0x33,
    HIT_BY_ENEMY                = 0x34,
    SMALL_DAMAGE                = 0x35,
    KNOCK_BACK                  = 0x36,
    RECOVER                     = 0x37,
    UNK_38                      = 0x38,
    UNK_39                      = 0x39,
    FALL_DAMAGE                 = 0x3A,
    DAMAGE_ELECTRIC             = 0x3B,
    ELECTRICUTED_MAYBE          = 0x3C,
    UNK_3D                      = 0x3D,
    FREE_FROM_CHU_CHU_          = 0x3E,
    PICKUP_MEDIUM               = 0x3F,
    PICK_UP                     = 0x40,
    THROWING                    = 0x41,
    PUT_DOWN_MEDIUM             = 0x42,
    HOLDING                     = 0x43,
    START_PUT_DOWN_MEDIUM       = 0x44,
    USE_BOW                     = 0x45,
    USE_SLINGSHOT               = 0x46,
    SHIELD_BASH_HIT             = 0x47,
    SHIELD_BASH_STUMBLE         = 0x48,
    SHIELD_BASH                 = 0x49,
    DIE                         = 0x4A,
    REVIVE                      = 0x4B,
    VOID_SAND                   = 0x4C,
    DAMAGE_LAVA                 = 0x4D,
    RESURFACE                   = 0x4E,
    SWIMMING                    = 0x4F,
    SWIMMING_ON_WATER           = 0x50,
    SWIMMING_UNDER_WATER        = 0x51,
    SWIM_DASH                   = 0x52,
    UNK_53                      = 0x53,
    START_SWIM_UNDER_WATER      = 0x54,
    UNK_55                      = 0x55,
    UNK_56                      = 0x56,
    SWIM_DASH_INTO_AIR          = 0x57,
    INTERACT                    = 0x58,
    USE_CLAWSHOTS               = 0x59,
    BEING_PULLED_BY_CLAWS       = 0x5A,
    HANG_FROM_PEAHAT            = 0x5B,
    HANG_FROM_PEAHAT_USE_CLAWS_ = 0x5C,
    HANG_FROM_TARGET            = 0x5D,
    HANG_FROM_TARGET_USE_CLAWS_ = 0x5E,
    USE_BEETLE                  = 0x5F,
    FINAL_BLOW                  = 0x60,
    FINAL_BLOW_FINISH           = 0x61,
    BACKFLIP                    = 0x62,
    LAND_BACKFLIP               = 0x63,
    AUTO_ENTER_CLAWL_           = 0x64,
    ENTER_CRAWL                 = 0x65,
    CRAWLING                    = 0x66,
    EXIT_CRAWL                  = 0x67,
    DOWSE_LOOK                  = 0x68,
    USE_BELLOWS                 = 0x69,
    READY_PUSH                  = 0x6A,
    START_PUSH                  = 0x6B,
    PUSHING                     = 0x6C,
    SWING_SWORD                 = 0x6D,
    USING_DOOR                  = 0x6E,
    USE_DDOOR                   = 0x6F,
    UNK_70                      = 0x70,
    DIG                         = 0x71,
    ATTACK_CRAWL                = 0x72,
    DAMAGE_CRAWL                = 0x73,
    CRAWLSPACE                  = 0x74,
    UNK_75                      = 0x75,
    UNK_76                      = 0x76,
    ZEV_EVENT_MAYBE             = 0x77,
    ITEM_GET                    = 0x78,
    FORCE_SAILCLOTH_VENT        = 0x79,
    USING_SAILCLOTH             = 0x7A,
    RELATED_TO_NEW_SWORD_IN_CS_ = 0x7B,
    UNK_7C                      = 0x7C,
    OPEN_CHEST                  = 0x7D,
    GRAB_VINE_ROPE              = 0x7E,
    CLIMB_UP_VINE_ROPE          = 0x7F,
    CLIMB_DOWN_VINE_ROPE        = 0x80,
    WALKING_ON_TIGHTROPE        = 0x81,
    UNK_82                      = 0x82,
    UNK_83                      = 0x83,
    CLIMBING_ONTO_TIGHTROPE     = 0x84,
    HANGING_ON_ZIP              = 0x85,
    SWORD_IN_DIAL               = 0x86,
    ENTER_MINECART              = 0x87,
    LEAVE_MINECART              = 0x88,
    IN_TRUCK_MINECART           = 0x89,
    ON_BIRD                     = 0x8A,
    BIRD_REACH_FOR_STATUETTE    = 0x8B,
    UNK_8C                      = 0x8C,
    USE_WHIP                    = 0x8D,
    WHIP_LOCKED                 = 0x8E,
    WHIP_RETURN                 = 0x8F,
    UNK_90                      = 0x90,
    UNK_91                      = 0x91,
    OPEN_WARDROBE               = 0x92,
    SLEEPING                    = 0x93,
    USE_BUGNET_CATCH            = 0x94,
    IN_GROOSENATOR              = 0x95,
    LAUNCH_FROM_GROOSENATOR     = 0x96,
    UNK_97                      = 0x97,
    UNK_98                      = 0x98,
    IN_BOAT                     = 0x99,
    UNK_9A                      = 0x9A,
    UNK_9B                      = 0x9B,
    UNK_9C                      = 0x9C,
    UNK_9D                      = 0x9D,
    SCOOP                       = 0x9E,
    UNK_9F                      = 0x9F,
    PULLED_BY_WATER             = 0xA0,
    UNK_A1                      = 0xA1,
    UNK_A2                      = 0xA2,
    STUCK_IN_CHU_CHU            = 0xA3,
    UNK_A4                      = 0xA4,
    UNK_A5                      = 0xA5,
    UNK_A6                      = 0xA6,
    UNK_A7                      = 0xA7,
    UNK_A8                      = 0xA8,
    UNK_A9                      = 0xA9,
    UNK_AA                      = 0xAA,
    UNK_AB                      = 0xAB,
    SIT_STAND_TRANSITION        = 0xAC,
    SITTING                     = 0xAD,
    UNK_AE                      = 0xAE,
    PLACE_TABLET                = 0xAF,
    SHAKING_OFF_WEB             = 0xB0,
    UNK_B1                      = 0xB1,
    UNK_B2                      = 0xB2,
    UNK_B3                      = 0xB3,
    ENTER_GODDESS_WALL          = 0xB4,
    UNK_B5                      = 0xB5,
    EXIT_GODDESS_WALL           = 0xB6,
    UNK_B7                      = 0xB7,
    UNK_B8                      = 0xB8,
    UNK_B9                      = 0xB9,
    UNK_BA                      = 0xBA,
    NUMBER_OF_ACTIONS           = 0xBB,
}

#[repr(u16)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum ITEM_BEING_USED {
    BOMB_BAG            = 0x0,
    BOW                 = 0x1,
    CLAWSHOTS           = 0x2,
    BEETLE              = 0x3,
    SLINGSHOT           = 0x4,
    GUST_BELLOWS        = 0x5,
    WHIP                = 0x6,
    MITTS               = 0x7,
    BUG_NET             = 0x8,
    HARP                = 0x9,
    SAILCLOTH           = 0xA,
    NONE                = 0xB,
    POTION              = 0xC,
    EMPTY_BOTTLE        = 0xD,
    ITEM_IN_BOTTLE      = 0xE,
    REVITALIZING_POTION = 0xF,
    SHIELD              = 0x10,
    SWORD               = 0x11,
    WATER_DRAGON_SCALE  = 0x12,
    GUIDE_PT_PM         = 0x13,
}

#[repr(C, packed(1))]
#[derive(Copy, Clone)]
pub struct dPlayer {
    pub vtable:                         u64,
    pub base:                           actor::dBasemembers,
    pub obj_base_members:               actor::dAcOBasemembers,
    pub _0:                             [u8; 8],
    pub changes_when_stabbing:          f32,
    pub sword_swing_direction:          u8,
    pub riding_type:                    u8,
    pub sword_swing_type:               u8,
    pub unk:                            u8,
    pub _1:                             [u8; 36],
    pub sword_and_more_states:          u32,
    pub flags_to_update_models:         u32,
    pub _2:                             u32,
    pub some_more_action_flags_mayhaps: u32,
    pub _3:                             u32,
    pub some_action_flags_maybe:        u32,
    pub player_anim_flags:              u32,
    pub action_flags:                   u32,
    pub action_flags_cont:              u32,
    pub current_action:                 PLAYER_ACTIONS,
    pub _4:                             [u8; 0x5F14],
    pub low_health_beeping_timer:       u8,
    pub _5:                             u16,
    pub some_stage_indicator:           u8,
    pub _6:                             [u8; 0x6F],
    pub burn_rate:                      u8,
    pub cursed_related_timer:           u16,
    pub some_timer:                     u16,
    pub triggered_buttons:              u16,
    pub _7:                             [u8; 2],
    pub held_buttons:                   u16,
    pub current_pressed_button_flags:   u16,
    pub _8:                             [u8; 4],
    pub item_being_used:                ITEM_BEING_USED,
    pub item_trying_to_be_used:         ITEM_BEING_USED,
    pub equipped_b_item:                u16,
    pub damage_cooldown:                u16,
    pub _9:                             [u8; 8],
    pub stamina_recovery_timer:         u16,
    pub something_we_use_for_stamina:   u8,
    pub _10:                            [u8; 7],
    pub skyward_strike_timer:           u16,
    pub some_movement_flags:            u16,
    pub _11:                            u16,
    pub _12:                            [u8; 2],
    pub idle_anim_timer:                u16,
    pub shit_smell_timer:               u16,
    pub burn_timer:                     u16,
    pub sheild_burn_timer:              u16,
    pub cursed_timer:                   u16,
    pub shock_effect_timer:             u16,
    pub _13:                            [u8; 0xA6],
    pub stamina_amount:                 u32,
    // + more stuff
}
assert_eq_size!([u8; 0x64DC], dPlayer);

// IMPORTANT: when using vanilla code, the start point must be declared in
// symbols.yaml and then added to this extern block.
extern "C" {
    // Functions
    fn debugPrint_128(string: *const c_char, fstr: *const c_char, ...);
}

// IMPORTANT: when adding functions here that need to get called from the game,
// add `#[no_mangle]` and add a .global *symbolname* to
// additions/rust-additions.asm

////////////////////////
// ADD FUNCTIONS HERE //
////////////////////////
